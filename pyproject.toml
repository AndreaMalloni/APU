[project]
name = "APU"
version = "0.1.0"
description = "A simple custom framework for creating 2D games with pygame"
authors = [
    { name = "Andrea Malloni", email = "malloni.andrea02@gmail.com" }]
license = "GPL-3.0"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
    # Include this classifier to prevent accidentally publishing private code to PyPI.
    #   https://pypi.org/classifiers/
    "Private :: Do Not Upload",
]
requires-python = ">=3.10"
dependencies = [
    "pygame-ce>=2.5.5",
    "rich",
    "typer-slim[standard]",
]

[project.urls]
Homepage = "https://github.com/AndreaMalloni/APU"
Documentation = "https://andreamalloni.github.io/APU/"
Repository = "https://github.com/AndreaMalloni/APU"

# [project.scripts]
# fact = "fact.cli:app"

[dependency-groups]
nox = [
    "nox",
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-randomly",
]
type_check = [
    "mypy",
    # Add "types-" stub packages as needed: https://github.com/python/typeshed/tree/main/stubs
]
lint = [
    "ruff",
]
docs = [
    "mkdocs-material",
    "mkdocs-htmlproofer-plugin",

    "mkdocstrings[python]",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
]

[build-system]
# TODO: Replace this with uv_build when it is it released for GA.
#   https://github.com/astral-sh/uv/issues/3957
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
default-groups = "all"

[tool.mypy]
ignore_missing_imports = true
strict = true
# TODO: Remove this when explicit-override is enabled by default in strict mode
#   https://github.com/python/mypy/issues/17511
enable_error_code = ["explicit-override"]
# If certain strict config options are too pedantic for a project,
# disable them selectively here by setting to false.

[tool.ruff]
line-length = 99
src = ["src"]

[tool.ruff.lint]
select = [
    "F", # pyflakes
    "E", # pycodestyle
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "RUF", # ruff
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "PIE", # flake8-pie
    "PT", # flake-pytest-style
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]
extend-ignore = [
    "RUF005",
    "RUF012",
]
unfixable = [
    # Disable removing unused imports by default and only enable within nox so editors don't delete
    # unused imports while the user is in the middle of editing a file on save.
    "F401",
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
split-on-trailing-comma = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["typer.Argument"]

[tool.pytest.ini_options]
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
filterwarnings = [
    # When running tests, treat warnings as errors (e.g. -Werror).
    # See: https://docs.pytest.org/en/latest/reference/reference.html#confval-filterwarnings
    "error",
    # Add additional warning suppressions as needed here. For example, if a third-party library
    # is throwing a deprecation warning that needs to be fixed upstream:
    # "ignore::DeprecationWarning:typer",
]

[tool.coverage.run]
branch = true
source = ["apu"]

[tool.hatch.build.targets.wheel]
packages = ["src/apu"]