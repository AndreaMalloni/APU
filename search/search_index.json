{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"map_loading/","text":"Sistema di Caricamento Mappe Il framework APU fornisce un sistema modulare e estendibile per il caricamento di mappe da diversi formati, con particolare supporto per i file generati da Tiled Map Editor. Panoramica Il sistema di caricamento \u00e8 basato su un'architettura a plugin che permette di: - Caricare mappe da formati diversi (JSON, TMX, formati personalizzati) - Supportare animazioni dei tile - Gestire hitbox e collisioni - Estendere facilmente il supporto per nuovi formati Utilizzo Base Caricamento Semplice from apu.loading import load_tiled_map # Carica una mappa Tiled (JSON o TMX) sprites = load_tiled_map(\"path/to/map.json\", \"path/to/assets/\") Utilizzo Avanzato from apu.loading import TiledMapLoader, JSONMapLoader, TMXMapLoader # Crea un loader personalizzato loader = TiledMapLoader() # Aggiungi un loader personalizzato loader.add_loader(MyCustomLoader()) # Carica la mappa sprites = loader.load(\"path/to/map.json\", \"path/to/assets/\") Formati Supportati JSON (Tiled) Estensione : .json Descrizione : Formato JSON esportato da Tiled Map Editor Caratteristiche : Supporta animazioni, oggetti, layer multipli TMX (Tiled) Estensione : .tmx Descrizione : Formato XML nativo di Tiled Map Editor Caratteristiche : Supporta compressione, encoding base64, animazioni Estendere il Sistema Creare un Loader Personalizzato Per aggiungere il supporto per un nuovo formato di mappa, crea una classe che eredita da MapLoader : from apu.loading import MapLoader from apu.entities import BaseSprite from typing import List class MyCustomLoader(MapLoader): def supports_format(self, file_path: str) -> bool: return file_path.lower().endswith('.myformat') def load(self, map_path: str, assets_path: str) -> List[BaseSprite]: # Implementa la logica di caricamento per il tuo formato sprites = [] # Leggi il file nel formato personalizzato with open(map_path, 'r') as f: data = f.read() # Parsing del formato personalizzato # ... # Crea gli sprite for tile_data in parsed_data: sprite = BaseSprite( position=tile_data['position'], layer=tile_data['layer'], image=tile_data['image'] ) sprites.append(sprite) return sprites Registrare il Loader from apu.loading import TiledMapLoader # Crea il loader principale loader = TiledMapLoader() # Aggiungi il tuo loader personalizzato loader.add_loader(MyCustomLoader()) # Ora il sistema supporta il tuo formato sprites = loader.load(\"map.myformat\", \"assets/\") Struttura delle Classi MapLoader (Classe Base Astratta) load(map_path, assets_path) : Carica una mappa e restituisce una lista di sprite supports_format(file_path) : Verifica se il formato \u00e8 supportato TiledMapLoader Loader principale che delega ai loader specifici add_loader(loader) : Aggiunge un nuovo loader al sistema JSONMapLoader Carica mappe JSON esportate da Tiled Supporta animazioni e oggetti Gestisce layer multipli TMXMapLoader Carica mappe TMX (XML) di Tiled Supporta compressione (gzip, zlib) Supporta encoding (CSV, base64) Caratteristiche Avanzate Animazioni dei Tile Il sistema supporta automaticamente le animazioni dei tile definite in Tiled: # Le animazioni vengono caricate automaticamente # e assegnate agli sprite corrispondenti sprites = load_tiled_map(\"map.json\", \"assets/\") # Gli sprite con animazioni avranno gi\u00e0 le sequenze configurate for sprite in sprites: if sprite.animations: sprite.switch_to(\"animated\") Hitbox e Collisioni Le hitbox definite in Tiled vengono caricate automaticamente: sprites = load_tiled_map(\"map.json\", \"assets/\") # Gli sprite con oggetti definiti avranno le hitbox configurate for sprite in sprites: if sprite.solid: # Lo sprite ha hitbox configurate pass Layer Multipli Il sistema rispetta l'ordine dei layer definito in Tiled: sprites = load_tiled_map(\"map.json\", \"assets/\") # Gli sprite sono ordinati per layer # Layer 0: Background # Layer 1: Terrain # Layer 2: Objects # etc. Best Practices Gestione degli Asset Mantieni tutti gli asset in una directory dedicata Usa percorsi relativi quando possibile Verifica che i tileset siano accessibili Performance Il caricamento avviene una sola volta all'inizializzazione Considera la compressione per mappe grandi Usa sprite sheet ottimizzati Estendibilit\u00e0 Mantieni l'interfaccia MapLoader pulita Documenta i nuovi formati supportati Fornisci esempi di utilizzo Esempi Pratici Demo Game Il file tests/demo/demo.py mostra un esempio completo di utilizzo: from apu.loading import load_tiled_map from apu.scene import TiledScene # Carica la mappa map_sprites = load_tiled_map(\"assets/map.json\", \"assets/\") # Crea la scena scene = TiledScene(16, *map_sprites) Loader Personalizzato Completo Vedi CustomMapLoader in src/apu/loading.py per un esempio di implementazione completa. Troubleshooting Problemi Comuni File non trovato : Verifica i percorsi degli asset Tileset mancante : Assicurati che il tileset sia nella directory corretta Formato non supportato : Verifica l'estensione del file o aggiungi un loader personalizzato Debug Abilita la visualizzazione delle hitbox per verificare il caricamento: scene = TiledScene(16, *sprites) scene.show_hitbox = True # Mostra le hitbox per debug","title":"Sistema di Caricamento Mappe"},{"location":"map_loading/#sistema-di-caricamento-mappe","text":"Il framework APU fornisce un sistema modulare e estendibile per il caricamento di mappe da diversi formati, con particolare supporto per i file generati da Tiled Map Editor.","title":"Sistema di Caricamento Mappe"},{"location":"map_loading/#panoramica","text":"Il sistema di caricamento \u00e8 basato su un'architettura a plugin che permette di: - Caricare mappe da formati diversi (JSON, TMX, formati personalizzati) - Supportare animazioni dei tile - Gestire hitbox e collisioni - Estendere facilmente il supporto per nuovi formati","title":"Panoramica"},{"location":"map_loading/#utilizzo-base","text":"","title":"Utilizzo Base"},{"location":"map_loading/#caricamento-semplice","text":"from apu.loading import load_tiled_map # Carica una mappa Tiled (JSON o TMX) sprites = load_tiled_map(\"path/to/map.json\", \"path/to/assets/\")","title":"Caricamento Semplice"},{"location":"map_loading/#utilizzo-avanzato","text":"from apu.loading import TiledMapLoader, JSONMapLoader, TMXMapLoader # Crea un loader personalizzato loader = TiledMapLoader() # Aggiungi un loader personalizzato loader.add_loader(MyCustomLoader()) # Carica la mappa sprites = loader.load(\"path/to/map.json\", \"path/to/assets/\")","title":"Utilizzo Avanzato"},{"location":"map_loading/#formati-supportati","text":"","title":"Formati Supportati"},{"location":"map_loading/#json-tiled","text":"Estensione : .json Descrizione : Formato JSON esportato da Tiled Map Editor Caratteristiche : Supporta animazioni, oggetti, layer multipli","title":"JSON (Tiled)"},{"location":"map_loading/#tmx-tiled","text":"Estensione : .tmx Descrizione : Formato XML nativo di Tiled Map Editor Caratteristiche : Supporta compressione, encoding base64, animazioni","title":"TMX (Tiled)"},{"location":"map_loading/#estendere-il-sistema","text":"","title":"Estendere il Sistema"},{"location":"map_loading/#creare-un-loader-personalizzato","text":"Per aggiungere il supporto per un nuovo formato di mappa, crea una classe che eredita da MapLoader : from apu.loading import MapLoader from apu.entities import BaseSprite from typing import List class MyCustomLoader(MapLoader): def supports_format(self, file_path: str) -> bool: return file_path.lower().endswith('.myformat') def load(self, map_path: str, assets_path: str) -> List[BaseSprite]: # Implementa la logica di caricamento per il tuo formato sprites = [] # Leggi il file nel formato personalizzato with open(map_path, 'r') as f: data = f.read() # Parsing del formato personalizzato # ... # Crea gli sprite for tile_data in parsed_data: sprite = BaseSprite( position=tile_data['position'], layer=tile_data['layer'], image=tile_data['image'] ) sprites.append(sprite) return sprites","title":"Creare un Loader Personalizzato"},{"location":"map_loading/#registrare-il-loader","text":"from apu.loading import TiledMapLoader # Crea il loader principale loader = TiledMapLoader() # Aggiungi il tuo loader personalizzato loader.add_loader(MyCustomLoader()) # Ora il sistema supporta il tuo formato sprites = loader.load(\"map.myformat\", \"assets/\")","title":"Registrare il Loader"},{"location":"map_loading/#struttura-delle-classi","text":"","title":"Struttura delle Classi"},{"location":"map_loading/#maploader-classe-base-astratta","text":"load(map_path, assets_path) : Carica una mappa e restituisce una lista di sprite supports_format(file_path) : Verifica se il formato \u00e8 supportato","title":"MapLoader (Classe Base Astratta)"},{"location":"map_loading/#tiledmaploader","text":"Loader principale che delega ai loader specifici add_loader(loader) : Aggiunge un nuovo loader al sistema","title":"TiledMapLoader"},{"location":"map_loading/#jsonmaploader","text":"Carica mappe JSON esportate da Tiled Supporta animazioni e oggetti Gestisce layer multipli","title":"JSONMapLoader"},{"location":"map_loading/#tmxmaploader","text":"Carica mappe TMX (XML) di Tiled Supporta compressione (gzip, zlib) Supporta encoding (CSV, base64)","title":"TMXMapLoader"},{"location":"map_loading/#caratteristiche-avanzate","text":"","title":"Caratteristiche Avanzate"},{"location":"map_loading/#animazioni-dei-tile","text":"Il sistema supporta automaticamente le animazioni dei tile definite in Tiled: # Le animazioni vengono caricate automaticamente # e assegnate agli sprite corrispondenti sprites = load_tiled_map(\"map.json\", \"assets/\") # Gli sprite con animazioni avranno gi\u00e0 le sequenze configurate for sprite in sprites: if sprite.animations: sprite.switch_to(\"animated\")","title":"Animazioni dei Tile"},{"location":"map_loading/#hitbox-e-collisioni","text":"Le hitbox definite in Tiled vengono caricate automaticamente: sprites = load_tiled_map(\"map.json\", \"assets/\") # Gli sprite con oggetti definiti avranno le hitbox configurate for sprite in sprites: if sprite.solid: # Lo sprite ha hitbox configurate pass","title":"Hitbox e Collisioni"},{"location":"map_loading/#layer-multipli","text":"Il sistema rispetta l'ordine dei layer definito in Tiled: sprites = load_tiled_map(\"map.json\", \"assets/\") # Gli sprite sono ordinati per layer # Layer 0: Background # Layer 1: Terrain # Layer 2: Objects # etc.","title":"Layer Multipli"},{"location":"map_loading/#best-practices","text":"","title":"Best Practices"},{"location":"map_loading/#gestione-degli-asset","text":"Mantieni tutti gli asset in una directory dedicata Usa percorsi relativi quando possibile Verifica che i tileset siano accessibili","title":"Gestione degli Asset"},{"location":"map_loading/#performance","text":"Il caricamento avviene una sola volta all'inizializzazione Considera la compressione per mappe grandi Usa sprite sheet ottimizzati","title":"Performance"},{"location":"map_loading/#estendibilita","text":"Mantieni l'interfaccia MapLoader pulita Documenta i nuovi formati supportati Fornisci esempi di utilizzo","title":"Estendibilit\u00e0"},{"location":"map_loading/#esempi-pratici","text":"","title":"Esempi Pratici"},{"location":"map_loading/#demo-game","text":"Il file tests/demo/demo.py mostra un esempio completo di utilizzo: from apu.loading import load_tiled_map from apu.scene import TiledScene # Carica la mappa map_sprites = load_tiled_map(\"assets/map.json\", \"assets/\") # Crea la scena scene = TiledScene(16, *map_sprites)","title":"Demo Game"},{"location":"map_loading/#loader-personalizzato-completo","text":"Vedi CustomMapLoader in src/apu/loading.py per un esempio di implementazione completa.","title":"Loader Personalizzato Completo"},{"location":"map_loading/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"map_loading/#problemi-comuni","text":"File non trovato : Verifica i percorsi degli asset Tileset mancante : Assicurati che il tileset sia nella directory corretta Formato non supportato : Verifica l'estensione del file o aggiungi un loader personalizzato","title":"Problemi Comuni"},{"location":"map_loading/#debug","text":"Abilita la visualizzazione delle hitbox per verificare il caricamento: scene = TiledScene(16, *sprites) scene.show_hitbox = True # Mostra le hitbox per debug","title":"Debug"}]}